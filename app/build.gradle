import com.android.gradle.NetworkPlugin
import com.google.gson.JsonArray
import com.google.gson.JsonObject
import com.google.gson.JsonParser

//import

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-android'
apply plugin:  NetworkPlugin
//apply plugin: 'groovy'

class Person{
    String name
    int age
}

def list = [new Person(name: "jackie",age: 27),new Person(name: "shimei",age: 25)]
//def json = JsonOutput

//this.afterEvaluate {
//    //找到第一个执行的task
//    def preBuildTask = project.tasks.getByName('preBuild')
//    preBuildTask.doFirst{
//        print("create File")
//    }
//
//}

//task createJson{
//    createApiRequest()
//    //createRequestAndResponse()
//    createTest()
//}

task CreateFileTask() {
    //createApiRequest()
}

void createFile() {
    //print("create file")
    StringBuilder sb = new StringBuilder();
    sb.append("\n");
    sb.append("package com.jackie.createapidemo.api.json;\n\n");
    sb.append("interface ApiRequest {\n\n");


    String json = readToString(new File(
            "/Users/jackie/Desktop/WorkPlace/AndroidWorkPlace/CreateApiDemo/Json/JsonString.txt"), "UTF-8");

    JsonParser parser = new JsonParser();
    JsonObject jsonObject = (JsonObject) parser.parse(json);

    //services
    JsonArray servicesArray = jsonObject.getAsJsonArray("services");

    for (int h = 0; h < servicesArray.size(); h++) {

        JsonObject interfacebject = servicesArray.get(h).getAsJsonObject();

        String outName = interfacebject.get("name").getAsString();

        String newOutName = outName.substring(0, 1).toLowerCase() + outName.substring(1);
        //System.out.println(newOutName);
        //optations:[{},{}]
        JsonArray optationsArray = interfacebject.getAsJsonArray("operations");
        for (int j = 0; j < optationsArray.size(); j++) {

            JsonObject jsInterface = optationsArray.get(j).getAsJsonObject();

            String tempName = jsInterface.get("name").getAsString();

            String name = newOutName.concat(tempName.substring(0, 1).toUpperCase() + tempName.substring(1));

            String method = jsInterface.get("method").getAsString();

            String path = jsInterface.get("path").getAsString();

            JsonArray pathArray = jsInterface.get("pathParams").getAsJsonArray();


            String responseType = jsInterface.get("responseType").getAsString().replace("void", "Void");

            String requestType = String.valueOf(jsInterface.get("requestType")).replace("\"", "");

            //@方法类型("url") @POST("product/{code}/review")
            String requestMethod = String.format("\t@%s(\"", method);
            sb.append(requestMethod);

            //移除首个/,同时规范一下（）中的内容，比如"account/reorder-v2/{id}"
            String[] pathArr = path.split("/");
            StringBuilder pathSb = new StringBuilder();
            if (pathArr.length > 0) {
                for (int i = 0; i < pathArr.length; i++) {
                    if (pathArr[i].equals("")) {
                        continue;
                    }
                    if (pathArr[i].contains(":")) {
                        String str = pathArr[i].replace(":", "{");

                        pathSb.append(str);
                        pathSb.append("}");
                        if (i != pathArr.length - 1) {
                            pathSb.append("/");
                        }
                        continue;
                    }
                    pathSb.append(pathArr[i]);
                    if (i != pathArr.length - 1) {
                        pathSb.append("/");
                    }
                }
            }
            System.out.println(pathSb.toString());
            sb.append(pathSb.toString());
            sb.append("\")\n\t");

//        fun addReview(@Path("code") code: String?,
//                      @Body body: HashMap<String, Any?>): Observable<Response<Void>>
            //如果路径中含有参数，进行拼接 @Path("code") code: String?,
            StringBuilder paramSb = new StringBuilder();
            if (pathArray != null && pathArray.size() > 0) {
                for (int i = 0; i < pathArray.size(); i++) {
                    JsonObject paramObject = pathArray.get(i).getAsJsonObject();
                    String paramName = paramObject.get("name").getAsString();
                    String paramType = paramObject.get("type").getAsString().replace("string", "String");
                    String pathString = String.format("@Path(\"%1s\") %2s: %3s?", paramName, paramName, paramType);
                    paramSb.append(pathString);
                    if (i != pathArray.size() - 1) {
                        paramSb.append(",");
                    }
                }
            }

            //请求Body  hasMap或者具体的类   @Body body: HashMap<String, Any?>): Observable<Response<Void>>
            StringBuilder bodySb = new StringBuilder();
            if (!requestType.equals("null")) {
                bodySb.append("@Body body: ");
                bodySb.append(requestType);
            }
            if (pathArray != null && pathArray.size() != 0 && !requestType.equals("null")) {
                paramSb.append(",");
            }
            //返回类型
            String reponseStr = String.format("): Observable<Response<%s>>", responseType);
            bodySb.append(reponseStr);

            String str = String.format("fun %1s(%2s%3s ", name, paramSb.toString(), bodySb.toString()).replace("(  ", "(");
            sb.append(str);
            sb.append("\n\n");

        }

    }

    sb.append("\n}");

    writeString2File(sb.toString(), new File(
            "/Users/jackie/Desktop/WorkPlace/AndroidWorkPlace/CreateApiDemo/app/src/main/java/com/jackie/createapidemo/api"
                    + File.separator + "json" + File.separator + "ApiRequest.kt"));


    //writeString2File(javaBeanStr,new File("/Test.java"));

}

/**
 * 将字符串写入文件
 */
private static void writeString2File(String str, File file) {
    BufferedWriter writer = null;
    File parentFile = file.getParentFile();
    try {
        if (!parentFile.exists()){
            parentFile.mkdirs();
        }
        if(!file.exists()) {
            file.createNewFile();
        }

        writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(file), "UTF-8"));
        writer.write(str);

    } catch (IOException e) {
        e.printStackTrace();
    } finally {
        try {
            writer.close();
        } catch (IOException e) {
            writer = null;
            e.printStackTrace();
        }
    }
}

/**
 * 根据指定编码格式将文件读取为字符串
 */
public static String readToString(File file, String charSet) {
    Long filelength = file.length();
    byte[] filecontent = new byte[filelength.intValue()];
    try {
        FileInputStream inputStream = new FileInputStream(file);
        inputStream.read(filecontent);
        inputStream.close();
    } catch (FileNotFoundException e) {
        e.printStackTrace();
    } catch (IOException e) {
        e.printStackTrace();
    }
    try {
        return new String(filecontent, charSet);
    } catch (UnsupportedEncodingException e) {
        e.printStackTrace();
        return null;
    }
}

//void createFile(){
//    print("create file")
//    StringBuilder sb = new StringBuilder();
//    sb.append("\n");
//    String javaBeanStr = "interface ApiRequest {"
//
//    writeString2File(javaBeanStr, new File(
//            "/Users/jackie/Desktop/WorkPlace/AndroidWorkPlace/CreateApiDemo/app/src/main/java/com/jackie/createapidemo/api"
//                    + File.separator + "json" + File.separator + "ApiRequest.kt"));
//
//
//
//}
//
//
///**
// * 将string按需要格式化,前面加缩进符,后面加换行符
// * @param tabNum 缩进量
// * @param srcString
// * @return
// */
//public static String formatSingleLine(int tabNum, String srcString) {
//    StringBuilder sb = new StringBuilder();
//    for(int i=0; i<tabNum; i++) {
//        sb.append("\t");
//    }
//    sb.append(srcString);
//    sb.append("\n");
//    return sb.toString();
//}
//
//
//
//public static void writeString2File(String str, File file) {
//    writeString2File(str, file, getCharSet(file));
//}
///**
// * 将字符串写入文件
// */
//public static void writeString2File(String str, File file, String encoding) {
//    BufferedWriter writer = null;
//    try {
//        if(!file.exists()) {
//            file.createNewFile();
//        }
//
//        writer = new BufferedWriter(new OutputStreamWriter(
//                new FileOutputStream(file), encoding));
//        writer.write(str);
//
//    } catch (IOException e) {
//        e.printStackTrace();
//    } finally {
//        try {
//            writer.close();
//        } catch (IOException e) {
//            writer = null;
//            e.printStackTrace();
//        }
//    }
//}
//
//
///**
// * 获取文件编码格式,暂只判断gbk/utf-8
// */
//public static String getCharSet(File file) {
//    String chatSet = null;
//    try {
//        InputStream inputStream = new java.io.FileInputStream(file);
//        byte[] b = new byte[3];
//        inputStream.read(b);
//        inputStream.close();
//        if (b[0] == -17 && b[1] == -69 && b[2] == -65)
//            chatSet = "UTF-8";
//        else
//            chatSet = "GBK";
//    } catch (IOException e) {
//        e.printStackTrace();
//    }
//    return chatSet;
//}
//






//
//task compileAndRunTest(dependsOn: CreateFile) {
//
//}








android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"
    defaultConfig {
        applicationId "com.jackie.createapidemo"
        minSdkVersion 18
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation files('libs/JsonToKotlinClass-3.5.1.jar')
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation"com.squareup.okhttp3:okhttp:3.12.0"
    implementation"com.squareup.okhttp3:logging-interceptor:3.12.0"
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation "com.squareup.retrofit2:retrofit:2.6.1"
    implementation "io.reactivex.rxjava2:rxjava:2.2.12"
    implementation "io.reactivex.rxjava2:rxandroid:2.1.1"
    compile "androidx.core:core-ktx:+"
    compile 'com.alibaba:fastjson:1.2.61'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    //implementation localGroovy()//groovy sdk
}
repositories {
    mavenCentral()
}
